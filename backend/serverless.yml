service: agrishot

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${env:STAGE, 'dev'}
  region: ap-northeast-1
  profile: ${self:service}-${self:provider.stage}-deploy
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOURCE_PREFIX}photos"
    - Effect: Allow
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOURCE_PREFIX}photos/stream/*"
      # Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectACL
      Resource:
        - "arn:aws:s3:::${self:provider.environment.RESOURCE_PREFIX}photos/*"
        - "arn:aws:s3:::${self:provider.environment.RESOURCE_PREFIX}photos-thumbnail/*"
  environment:
    RESOURCE_PREFIX: ${self:service}-${self:provider.stage}-
    FACEBOOK_PAGE_ACCESS_TOKEN: ${env:FACEBOOK_PAGE_ACCESS_TOKEN, self:custom.envs.FACEBOOK_PAGE_ACCESS_TOKEN}
    CUSTOMVISION_PROJECT_ID: ${env:CUSTOMVISION_PROJECT_ID, self:custom.envs.CUSTOMVISION_PROJECT_ID}
    CUSTOMVISION_PREDICTION_KEY: ${env:CUSTOMVISION_PREDICTION_KEY, self:custom.envs.CUSTOMVISION_PREDICTION_KEY}

custom:
  envs: ${file(../.env.${self:provider.stage}.yml)}

package:
  include:
    - app/**
  exclude:
    - .git/**
    - tmp/**
    - test/**
    - node_modules/.bin/**
    - node_modules/aws-sdk/**

functions:
  facebook-challenge:
    handler: app/facebook/handler.challenge
    events:
      - http:
          path: webhook/facebook
          method: get
          cors: true

  facebook-receive:
    handler: app/facebook/handler.receive
    events:
      - http:
          path: webhook/facebook
          method: post
          cors: true

  photos-recognize:
    handler: app/photos/handler.recognize
    timeout: 10
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PhotosDynamoDbTable, StreamArn]
          batchSize: 1

  photos-thumbnail:
    handler: app/photos/handler.thumbnail
    events:
      - s3:
          bucket: photos
          event: s3:ObjectCreated:*

resources:
  Resources:
    PhotosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.RESOURCE_PREFIX}photos
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: sender_id
            AttributeType: S
          -
            AttributeName: created_at
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.RESOURCE_PREFIX}photos-sender_id-created_at
            KeySchema:
              -
                AttributeName: sender_id
                KeyType: HASH
              -
                AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    S3BucketPhotos:
      Type: 'AWS::S3::Bucket'
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.RESOURCE_PREFIX}photos
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"

    S3BucketPhotosThumbnail:
      Type: 'AWS::S3::Bucket'
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.RESOURCE_PREFIX}photos-thumbnail
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"

    PhotosDashthumbnailLambdaPermissionPhotosS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - PhotosDashthumbnailLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:provider.environment.RESOURCE_PREFIX}photos"
