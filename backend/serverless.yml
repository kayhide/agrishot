service: agrishot

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  profile: ${self:service}-${self:provider.stage}-deploy
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOURCE_PREFIX}photos"
    - Effect: Allow
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESOURCE_PREFIX}photos/stream/*"
      # Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectACL
      Resource: "arn:aws:s3:::${self:provider.environment.RESOURCE_PREFIX}photos/*"
  environment:
    RESOURCE_PREFIX: ${self:service}-${self:provider.stage}-
    FACEBOOK_PAGE_ACCESS_TOKEN: ${env:FACEBOOK_PAGE_ACCESS_TOKEN, self:custom.envs.FACEBOOK_PAGE_ACCESS_TOKEN}

custom:
  envs: ${file(../.env.${self:provider.stage}.yml)}

package:
  include:
    - app/**
  exclude:
    - .git/**
    - tmp/**
    - test/**
    - node_modules/.bin/**
    - node_modules/aws-sdk/**

functions:
  challenge:
    handler: app/handler.challenge
    events:
      - http:
          path: webhook
          method: get
          cors: true

  receive:
    handler: app/handler.receive
    events:
      - http:
          path: webhook
          method: post
          cors: true

  recognize:
    handler: app/handler.recognize
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PhotosDynamoDbTable, StreamArn]
          batchSize: 1

resources:
  Resources:
    PhotosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.RESOURCE_PREFIX}photos
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
    PhotosS3Bucket:
      Type: 'AWS::S3::Bucket'
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.RESOURCE_PREFIX}photos
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
